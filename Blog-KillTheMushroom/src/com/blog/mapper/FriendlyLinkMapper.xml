<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.blog.dao.FriendlyLinkMapper" >
  <resultMap id="BaseResultMap" type="com.blog.model.FriendlyLink" >
    <id column="linkId" property="linkId" jdbcType="INTEGER" />
    <result column="linkName" property="linkName" jdbcType="VARCHAR" />
    <result column="linkUrl" property="linkUrl" jdbcType="VARCHAR" />
    <result column="linkLogo" property="linkLogo" jdbcType="VARCHAR" />
    <result column="sort" property="sort" jdbcType="INTEGER" />
    <result column="createTime" property="createTime" jdbcType="TIMESTAMP" />
    <result column="freeze" property="freeze" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    linkId, linkName, linkUrl, linkLogo, sort, createTime, freeze
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from friendly_link
    where linkId = #{linkId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from friendly_link
    where linkId = #{linkId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.blog.model.FriendlyLink" >
    insert into friendly_link (linkId, linkName, linkUrl, 
      linkLogo, sort, createTime, 
      freeze)
    values (#{linkId,jdbcType=INTEGER}, #{linkName,jdbcType=VARCHAR}, #{linkUrl,jdbcType=VARCHAR}, 
      #{linkLogo,jdbcType=VARCHAR}, #{sort,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{freeze,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.blog.model.FriendlyLink" >
    insert into friendly_link
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="linkId != null" >
        linkId,
      </if>
      <if test="linkName != null" >
        linkName,
      </if>
      <if test="linkUrl != null" >
        linkUrl,
      </if>
      <if test="linkLogo != null" >
        linkLogo,
      </if>
      <if test="sort != null" >
        sort,
      </if>
      <if test="createTime != null" >
        createTime,
      </if>
      <if test="freeze != null" >
        freeze,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="linkId != null" >
        #{linkId,jdbcType=INTEGER},
      </if>
      <if test="linkName != null" >
        #{linkName,jdbcType=VARCHAR},
      </if>
      <if test="linkUrl != null" >
        #{linkUrl,jdbcType=VARCHAR},
      </if>
      <if test="linkLogo != null" >
        #{linkLogo,jdbcType=VARCHAR},
      </if>
      <if test="sort != null" >
        #{sort,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="freeze != null" >
        #{freeze,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.blog.model.FriendlyLink" >
    update friendly_link
    <set >
      <if test="linkName != null" >
        linkName = #{linkName,jdbcType=VARCHAR},
      </if>
      <if test="linkUrl != null" >
        linkUrl = #{linkUrl,jdbcType=VARCHAR},
      </if>
      <if test="linkLogo != null" >
        linkLogo = #{linkLogo,jdbcType=VARCHAR},
      </if>
      <if test="sort != null" >
        sort = #{sort,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="freeze != null" >
        freeze = #{freeze,jdbcType=INTEGER},
      </if>
    </set>
    where linkId = #{linkId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.blog.model.FriendlyLink" >
    update friendly_link
    set linkName = #{linkName,jdbcType=VARCHAR},
      linkUrl = #{linkUrl,jdbcType=VARCHAR},
      linkLogo = #{linkLogo,jdbcType=VARCHAR},
      sort = #{sort,jdbcType=INTEGER},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      freeze = #{freeze,jdbcType=INTEGER}
    where linkId = #{linkId,jdbcType=INTEGER}
  </update>
</mapper>