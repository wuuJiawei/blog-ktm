<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.blog.dao.ArticleClassifyMapper" >
  <resultMap id="BaseResultMap" type="com.blog.model.ArticleClassify" >
    <id column="classifyId" property="classifyId" jdbcType="INTEGER" />
    <result column="classifyName" property="classifyName" jdbcType="VARCHAR" />
    <result column="userId" property="userId" jdbcType="INTEGER" />
    <result column="createTime" property="createTime" jdbcType="TIMESTAMP" />
    <result column="freeze" property="freeze" jdbcType="INTEGER" />
    <result column="sort" property="sort" jdbcType="INTEGER" />
    <result column="articleNum" property="articleNum" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    classifyId, classifyName, userId, createTime, freeze, sort, articleNum
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from article_classify
    where classifyId = #{classifyId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from article_classify
    where classifyId = #{classifyId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.blog.model.ArticleClassify" >
    insert into article_classify (classifyId, classifyName, userId, 
      createTime, freeze, sort, 
      articleNum)
    values (#{classifyId,jdbcType=INTEGER}, #{classifyName,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{freeze,jdbcType=INTEGER}, #{sort,jdbcType=INTEGER}, 
      #{articleNum,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.blog.model.ArticleClassify" >
    insert into article_classify
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="classifyId != null" >
        classifyId,
      </if>
      <if test="classifyName != null" >
        classifyName,
      </if>
      <if test="userId != null" >
        userId,
      </if>
      <if test="createTime != null" >
        createTime,
      </if>
      <if test="freeze != null" >
        freeze,
      </if>
      <if test="sort != null" >
        sort,
      </if>
      <if test="articleNum != null" >
        articleNum,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="classifyId != null" >
        #{classifyId,jdbcType=INTEGER},
      </if>
      <if test="classifyName != null" >
        #{classifyName,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="freeze != null" >
        #{freeze,jdbcType=INTEGER},
      </if>
      <if test="sort != null" >
        #{sort,jdbcType=INTEGER},
      </if>
      <if test="articleNum != null" >
        #{articleNum,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.blog.model.ArticleClassify" >
    update article_classify
    <set >
      <if test="classifyName != null" >
        classifyName = #{classifyName,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        userId = #{userId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="freeze != null" >
        freeze = #{freeze,jdbcType=INTEGER},
      </if>
      <if test="sort != null" >
        sort = #{sort,jdbcType=INTEGER},
      </if>
      <if test="articleNum != null" >
        articleNum = #{articleNum,jdbcType=INTEGER},
      </if>
    </set>
    where classifyId = #{classifyId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.blog.model.ArticleClassify" >
    update article_classify
    set classifyName = #{classifyName,jdbcType=VARCHAR},
      userId = #{userId,jdbcType=INTEGER},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      freeze = #{freeze,jdbcType=INTEGER},
      sort = #{sort,jdbcType=INTEGER},
      articleNum = #{articleNum,jdbcType=INTEGER}
    where classifyId = #{classifyId,jdbcType=INTEGER}
  </update>
</mapper>